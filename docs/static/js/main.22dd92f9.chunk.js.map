{"version":3,"sources":["App.js","index.js"],"names":["marked","setOptions","breaks","Previewer","useState","previewText","setPreviewText","previewRef","useRef","useEffect","document","addEventListener","handleChange","current","innerHTML","removeEventListener","e","target","value","for","id","onChange","ref","ReactDOM","render","StrictMode","App","getElementById"],"mappings":"sMAIAA,SAAOC,WAAW,CAChBC,QAAQ,IAGV,IA+EeC,EAzCG,WAEhB,MAAsCC,mBAxC9B,seAwCR,mBAAOC,EAAP,KAAoBC,EAApB,KACMC,EAAaC,mBAEnBC,qBAAU,WAMR,OAJAC,SAASC,iBAAiB,UAAWC,GACrCL,EAAWM,QAAQC,UAAYd,iBAAOK,GAG/B,WACLK,SAASK,oBAAoB,UAAWH,OAK5C,IAAMA,EAAe,SAACI,GAEpBV,EAAeU,EAAEC,OAAOC,QAI1B,OACE,gCACI,uBAAOC,IAAI,UAAX,0BACA,uBACA,0BACEC,GAAG,SACHC,SAAUT,EACVM,MAAOb,IAET,qBACEe,GAAG,UACHE,IAAKf,QC3EfgB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAD,MAEFhB,SAASiB,eAAe,wB","file":"static/js/main.22dd92f9.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from \"react\";\nimport {marked} from \"marked\"\nimport \"./index.css\";\n\nmarked.setOptions({\n  breaks: true\n});\n\nconst text = `sup dudes\n====\nand dudettes\n---\n\n**sample text**\n\n_dimple xetx_\n\n\\`sample code\\`\n\n\\`\\`\\`\n// sample codes\n\nconst test = Math.floor(Math.random() * 5)\n\\`\\`\\`\n\n[sample link](https://codepen.io/)\n\n> sample \n>\n> block\n\ntest | test | regtest \n\n- testreg\n  - testtest\n  - regreg\n  \n1. legs\n1. arms\n1. head\n\n\n  \n![sample image](https://cpwebassets.codepen.io/assets/social/facebook-default-05cf522ae1d4c215ae0f09d866d97413a2204b6c9339c6e7a1b96ab1d4a7340f.png)\n  `\n\nconst Previewer = () => {\n\n  const [previewText, setPreviewText] = useState(text); // Hook - initial state loaded with text var content and setState function.\n  const previewRef = useRef(); // declares a reference object\n\n  useEffect(() => { // Hook - on conmponent update, do the following:\n\n    document.addEventListener('keydown', handleChange); // listens to key presses so they call a funtion\n    previewRef.current.innerHTML = marked(previewText) // parses the previewText state through marked and updates the reference object\n    // state and ref are updated at the same time\n\n    return () => {\n      document.removeEventListener('keydown', handleChange); // clean up event listener\n    }\n\n  });\n\n  const handleChange = (e) => {\n\n    setPreviewText(e.target.value) // Hook - setState\n\n  }\n\n  return (\n    <div>\n        <label for='#editor'>TEXTMARKDOWN</label>\n        <br/>\n        <textarea \n          id='editor' \n          onChange={handleChange}\n          value={previewText} // loads state into input\n        ></textarea>\n        <div \n          id='preview' \n          ref={previewRef} // loads ref into html (plain text as parsed by marked)\n        ></div>\n    </div>\n  );\n\n}\n\nexport default Previewer;\n\n\n/*\nclass Previewer extends React.Component {\n\n  handleChange(e) {\n    this.setState({\n      text: e.target.value\n    });\n  }\n}\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('markdown-previewer')\n);"],"sourceRoot":""}