{"version":3,"sources":["App.js","index.js"],"names":["marked","setOptions","breaks","Previewer","useState","previewText","setPreviewText","previewRef","useRef","useEffect","document","addEventListener","handleChange","current","innerHTML","removeEventListener","e","target","value","for","id","onChange","ref","ReactDOM","render","StrictMode","App","getElementById"],"mappings":"sMAIAA,SAAOC,WAAW,CAChBC,QAAQ,IAGV,IA+EeC,EAzCG,WAEhB,MAAsCC,mBAxC9B,seAwCR,mBAAOC,EAAP,KAAoBC,EAApB,KACMC,EAAaC,mBAEnBC,qBAAU,WAMR,OAJAC,SAASC,iBAAiB,UAAWC,GACrCL,EAAWM,QAAQC,UAAYd,iBAAOK,GAG/B,WACLK,SAASK,oBAAoB,UAAWH,OAK5C,IAAMA,EAAe,SAACI,GAEpBV,EAAeU,EAAEC,OAAOC,QAI1B,OACE,gCACI,uBAAOC,IAAI,UAAX,0BACA,uBACA,0BACEC,GAAG,SACHC,SAAUT,EACVM,MAAOb,IAET,qBACEe,GAAG,UACHE,IAAKf,QC3EfgB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAD,MAEFhB,SAASiB,eAAe,wB","file":"static/js/main.c913fa04.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from \"react\";\r\nimport {marked} from \"marked\"\r\nimport \"./index.css\";\r\n\r\nmarked.setOptions({\r\n  breaks: true\r\n});\r\n\r\nconst text = `sup dudes\r\n====\r\nand dudettes\r\n---\r\n\r\n**sample text**\r\n\r\n_dimple xetx_\r\n\r\n\\`sample code\\`\r\n\r\n\\`\\`\\`\r\n// sample codes\r\n\r\nconst test = Math.floor(Math.random() * 5)\r\n\\`\\`\\`\r\n\r\n[sample link](https://codepen.io/)\r\n\r\n> sample \r\n>\r\n> block\r\n\r\ntest | test | regtest \r\n\r\n- testreg\r\n  - testtest\r\n  - regreg\r\n  \r\n1. legs\r\n1. arms\r\n1. head\r\n\r\n\r\n  \r\n![sample image](https://cpwebassets.codepen.io/assets/social/facebook-default-05cf522ae1d4c215ae0f09d866d97413a2204b6c9339c6e7a1b96ab1d4a7340f.png)\r\n  `\r\n\r\nconst Previewer = () => {\r\n\r\n  const [previewText, setPreviewText] = useState(text); // Hook - initial state loaded with text var content and setState function.\r\n  const previewRef = useRef(); // declares a reference object\r\n\r\n  useEffect(() => { // Hook - on conmponent update, do the following:\r\n\r\n    document.addEventListener('keydown', handleChange); // listens to key presses so they call a funtion\r\n    previewRef.current.innerHTML = marked(previewText) // parses the previewText state through marked and updates the reference object\r\n    // state and ref are updated at the same time\r\n\r\n    return () => {\r\n      document.removeEventListener('keydown', handleChange); // clean up event listener\r\n    }\r\n\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n\r\n    setPreviewText(e.target.value) // Hook - setState\r\n\r\n  }\r\n\r\n  return (\r\n    <div>\r\n        <label for='#editor'>TEXTMARKDOWN</label>\r\n        <br/>\r\n        <textarea \r\n          id='editor' \r\n          onChange={handleChange}\r\n          value={previewText} // loads state into input\r\n        ></textarea>\r\n        <div \r\n          id='preview' \r\n          ref={previewRef} // loads ref into html (plain text as parsed by marked)\r\n        ></div>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default Previewer;\r\n\r\n\r\n/*\r\nclass Previewer extends React.Component {\r\n\r\n  handleChange(e) {\r\n    this.setState({\r\n      text: e.target.value\r\n    });\r\n  }\r\n}\r\n*/","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('markdown-previewer')\r\n);"],"sourceRoot":""}